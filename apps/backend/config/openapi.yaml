openapi: 3.0.3
info:
  title: AI Sales Agent API
  version: 1.0.0
servers:
  - url: http://localhost:3000
paths:
  /api/v1/health:
    get:
      summary: Health check
      responses:
        '200':
          description: OK
  /api/v1/auth/sign_in:
    post:
      summary: Sign in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                    password:
                      type: string
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
  /api/v1/auth/sign_up:
    post:
      summary: Sign up
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                account:
                  type: object
                  properties:
                    name: { type: string }
                    plan_slug: { type: string }
                user:
                  type: object
                  properties:
                    email: { type: string }
                    password: { type: string }
                    password_confirmation: { type: string }
      responses:
        '201': { description: Created }
  /api/v1/pipelines:
    get:
      summary: List pipelines
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pipelines:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pipeline'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
    post:
      summary: Create pipeline
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pipeline:
                  $ref: '#/components/schemas/PipelineCreate'
      responses:
        '201': { description: Created }
        '422': { description: Unprocessable Content }
  /api/v1/pipelines/{id}:
    get:
      summary: Show pipeline
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pipeline:
                    $ref: '#/components/schemas/Pipeline'
        '404': { description: Not Found }
    patch:
      summary: Update pipeline
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pipeline:
                  $ref: '#/components/schemas/PipelineUpdate'
      responses:
        '200': { description: OK }
        '422': { description: Unprocessable Content }
    delete:
      summary: Delete pipeline
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses: { '204': { description: No Content } }
  /api/v1/leads:
    get:
      summary: List leads
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  leads:
                    type: array
                    items:
                      $ref: '#/components/schemas/Lead'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
    post:
      summary: Create lead
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lead:
                  $ref: '#/components/schemas/LeadCreate'
      responses:
        '201': { description: Created }
        '422': { description: Unprocessable Content }
  /api/v1/leads/{id}:
    get:
      summary: Show lead
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  lead:
                    $ref: '#/components/schemas/Lead'
        '404': { description: Not Found }
    patch:
      summary: Update lead
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lead:
                  $ref: '#/components/schemas/LeadUpdate'
      responses:
        '200': { description: OK }
        '422': { description: Unprocessable Content }
    delete:
      summary: Delete lead
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses: { '204': { description: No Content } }
  /api/v1/campaigns:
    get:
      summary: List campaigns
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  campaigns:
                    type: array
                    items:
                      $ref: '#/components/schemas/Campaign'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
    post:
      summary: Create campaign
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                campaign:
                  $ref: '#/components/schemas/CampaignCreate'
      responses:
        '201': { description: Created }
        '422': { description: Unprocessable Content }
  /api/v1/campaigns/{id}:
    get:
      summary: Show campaign
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  campaign:
                    $ref: '#/components/schemas/Campaign'
        '404': { description: Not Found }
    patch:
      summary: Update campaign
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                campaign:
                  $ref: '#/components/schemas/CampaignUpdate'
      responses:
        '200': { description: OK }
        '422': { description: Unprocessable Content }
    delete:
      summary: Delete campaign
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses: { '204': { description: No Content } }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Pagination:
      type: object
      properties:
        page: { type: integer }
        items: { type: integer }
        count: { type: integer }
        pages: { type: integer }
    Plan:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        slug: { type: string }
        description: { type: string }
        monthly_price_cents: { type: integer }
        limits: { type: object, additionalProperties: true }
        features: { type: object, additionalProperties: true }
        active: { type: boolean }
    AccountProfile:
      type: object
      properties:
        summary: { type: string }
        target_industries: { type: array, items: { type: string } }
        target_roles: { type: array, items: { type: string } }
        target_locations: { type: array, items: { type: string } }
        ideal_customer_profile: { type: object }
        questionnaire: { type: object }
    Account:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        active: { type: boolean }
        plan:
          $ref: '#/components/schemas/Plan'
        settings: { type: object }
        profile:
          $ref: '#/components/schemas/AccountProfile'
    Pipeline:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        description: { type: string }
        status: { type: string }
        stage_definitions:
          type: array
          items: { type: object, properties: { name: { type: string } } }
        primary: { type: boolean }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    PipelineCreate:
      type: object
      properties:
        name: { type: string }
        description: { type: string }
        status: { type: string }
        stage_definitions:
          type: array
          items: { type: object, properties: { name: { type: string } } }
        primary: { type: boolean }
      required: [name]
    PipelineUpdate:
      allOf:
        - $ref: '#/components/schemas/PipelineCreate'
    Lead:
      type: object
      properties:
        id: { type: integer }
        pipeline_id: { type: integer }
        account_id: { type: integer }
        source: { type: string }
        external_id: { type: string }
        status: { type: string }
        first_name: { type: string }
        last_name: { type: string }
        email: { type: string }
        company: { type: string }
        job_title: { type: string }
        location: { type: string }
        phone: { type: string }
        linkedin_url: { type: string }
        website: { type: string }
        score: { type: integer }
        last_contacted_at: { type: string, format: date-time }
        enrichment: { type: object }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    LeadCreate:
      type: object
      properties:
        pipeline_id: { type: integer }
        status: { type: string }
        first_name: { type: string }
        last_name: { type: string }
        email: { type: string }
      required: [pipeline_id]
    LeadUpdate:
      allOf:
        - $ref: '#/components/schemas/LeadCreate'
    Campaign:
      type: object
      properties:
        id: { type: integer }
        account_id: { type: integer }
        pipeline_id: { type: integer }
        name: { type: string }
        channel: { type: string }
        status: { type: string }
        audience_filters: { type: object }
        schedule: { type: object }
        metrics: { type: object }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    CampaignCreate:
      type: object
      properties:
        pipeline_id: { type: integer }
        name: { type: string }
        channel: { type: string }
        status: { type: string }
      required: [name, channel]
    CampaignUpdate:
      allOf:
        - $ref: '#/components/schemas/CampaignCreate'
security:
  - bearerAuth: []
